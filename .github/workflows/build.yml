name: Ecs deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  scan-build-containerize:
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: clone repository
        uses: actions/checkout@v3

      - name: setting up maven and java in our runner
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: code scanning
        run: mvn sonar:sonar -Dsonar.host.url=http://184.73.118.53:9000

      - name: code build with maven
        run: mvn clean package

      - name: upload artifact into artifact repository
        run: mvn --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: authenticate into aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: login into Amazon ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: building with docker
        id: build_image
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: p6d3t8u8
          REPOSITORY: ecs-deployment
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
          echo "image = $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill the Image ID into the task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task_definition.json
          image: ${{ steps.build_image.outputs.image }}
          container-name: ecs-deployment-cont

      - name: Deploy to Amazon ECS using task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ecs-demo-service
          cluster: ecs-deployment
          wait-for-service-stability: true