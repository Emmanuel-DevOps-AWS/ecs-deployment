name: Ecs deployment  ## Set the name of the workflow

on:  ## Define the events triggering the workflow
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  scan-build-containerize: ## Define a job named 'scan-build-containerize'
    permissions:  ## Specify permissions required for the job
      contents: read
      packages: write
    runs-on: ubuntu-latest ## Set the runner operating system for the job
    steps:
      - name: clone repository  ## Step to clone the repository
        uses: actions/checkout@v3

      - name: setting up maven and java in our runner  ## Step to set up Maven and Java
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: code scanning
        run: mvn sonar:sonar -Dsonar.host.url=http://184.73.118.53:9000  ## Step to run code scanning with SonarQube

      - name: code build with maven  ## Step to build the code with Maven
        run: mvn clean package

      - name: upload artifact into artifact repository  ## Step to upload artifact to Github Repository
        run: mvn --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: authenticate into aws ## Step to configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: login into Amazon ECR  ## Step to log in to Amazon ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
      
      # Explanation:
      # This step is used to authenticate and log in to the Amazon Elastic Container Registry (ECR).
      # The 'aws-actions/amazon-ecr-login' action is employed to simplify the authentication process.
      # 'registry-type: public' specifies that the ECR registry is public.

      - name: building with docker ## Step to build Docker image and push to Amazon ECR
        id: build_image
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: p6d3t8u8
          REPOSITORY: ecs-deployment
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG"

        # Explanation:
        # This step involves building a Docker image for the application and pushing it to Amazon ECR.
        # The Docker image is built using the Dockerfile in the repository.
        # The image is then tagged with a combination of the ECR registry, default registry alias, repository, and a unique identifier (commit SHA).
        # Finally, the image is pushed to the specified ECR repository.

      - name: Fill the Image ID into the task definition
        id: task-def
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: p6d3t8u8
          REPOSITORY: ecs-deployment
          IMAGE_TAG: ${{ github.sha }}
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task_definition.json
          image: ${{ steps.build_image.outputs.image }}
          container-name: ecs-deployment-cont
          # Explanation:
          # This step updates the ECS task definition with the Docker image that was built and pushed in the previous step.
          # 'aws-actions/amazon-ecs-render-task-definition' is used to modify the task definition.
          # It takes the existing task definition file ('task_definition.json') and updates the container image.

      - name: Deploy to Amazon ECS using task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ecs-demo-service
          cluster: ecs-deployment
          wait-for-service-stability: true
          # Explanation:
          # This final step deploys the updated task definition to Amazon ECS.
          # 'aws-actions/amazon-ecs-deploy-task-definition' is used to perform the deployment.
          # It specifies the ECS service, cluster, and ensures stability by waiting for the service to stabilize before completing.